<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reading note | Zion Blog]]></title>
  <link href="http://zionwu.github.io/blog/categories/reading-note/atom.xml" rel="self"/>
  <link href="http://zionwu.github.io/"/>
<<<<<<< HEAD
  <updated>2016-12-03T00:31:50+08:00</updated>
=======
  <updated>2016-10-28T01:24:36+08:00</updated>
>>>>>>> 9f8f42c6e18c4edcace0f706ebedcedd7eb3299a
  <id>http://zionwu.github.io/</id>
  <author>
    <name><![CDATA[Zion Wu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note for The C programming language]]></title>
    <link href="http://zionwu.github.io/blog/2013/08/02/note-for-the-c-programming-language/"/>
    <updated>2013-08-02T23:08:00+08:00</updated>
    <id>http://zionwu.github.io/blog/2013/08/02/note-for-the-c-programming-language</id>
    <content type="html"><![CDATA[<p>最近读了K&amp;R，也就是传说中的《The C programming language》。作为我第一门学习的语言，对C的喜爱不言而喻。有两年多没接触C，再次回顾，相比其Java和C++等高级语言, 其简洁优美的特性深深吸引了我。以下是阅读过程中在evernote中的一些摘要。</p>

<p>1.You should note that we are using the words definition and declaration carefully when we refer to external variables in this section. Definition refers to the place where the variable is created or assigned storage; declaration refers to places where the nature of the variable is stated but no storage is allocated. <br/>
强调了声明与定义的区别。声明只是阐述了变量的类型，而没有实际分配内存。定义则为变量分配了内存。</p>

<p>2.An external variable must be defined, exactly once, outside of any function; this sets aside storage for it. The variable must also be declared in each function that wants to access it; this states the type of the variable. The declaration may be an explicit extern statement or may be implicit from context. <br/>
强调了外部变量的使用方法。必须先在函数外面定义一次，以分配内存空间。而在使用的函数内也要重新声明。声明可以直接使用extern关键字.</p>

<p>3.The problem is distinguishing the end of input from valid data. The solution is that getchar returns a distinctive value when there is no more input, a value that cannot be confused with any real character. This value is called EOF, for end of file. We must declare c to be a type big enough to hold any value that getchar returns. We can&rsquo;t use char since c must be big enough to hold EOF in addition to any possible char. Therefore we use int. <br/>
说明了getchar的使用方法。为了表明输入结束，getchar会返回EOF。为了能够容纳getchar的返回值，所以必须使用int而不是char</p>

<p>4.strlen(s) returns the length of its character string argument s, excluding the terminal &lsquo;\0&rsquo;.<br/>
strlen(s)返回的长度不包含表示字符串结尾的'\0'.</p>

<p>5.External and static variables are initialized to zero by default. Automatic variables for which is no explicit initializer have undefined (i.e., garbage) values.<br/>
外部变量与静态变量都会被默认初始化为0。 而未初始化的自动变量的初始值未定义，因此要注意初始化变量。</p>

<p>6.By definition, the numeric value of a relational or logical expression is 1 if the relation is true, and 0 if the relation is false.<br/>
当关系或逻辑表达式为真时对应的值为1， 假时为0.</p>

<p>7.atoi, which converts a string of digits into its numeric equivalent.<br/>
atoi将字符串转化为其表示的对应的数值.</p>

<p>8.Declaring the argument x to be an unsigned ensures that when it is right-shifted, vacated bits will be filled with zeros, not sign bits, regardless of the machine the program is run on.<br/>
将参数x声明为无符号的保证了它是向右移位并且用0来补位.</p>

<p>9.The moral is that writing code that depends on order of evaluation is a bad programming practice in any language.<br/>
在任何编程语言中， 表达式的结果依赖于其中a,b的估值顺序是一种不好的实践.</p>

<p>10.double atof(); that too is taken to mean that nothing is to be assumed about the arguments of atof; all parameter checking is turned off. This special meaning of the empty argument list is intended to permit older C programs to compile with new compilers. But it&rsquo;s a bad idea to use it with new C programs. If the function takes arguments, declare them; if it takes no arguments, use void.<br/>
在旧的C语言中，atof()这样会关掉参数检查。空参数列表是为了旧的C程序能够在新编译器下通过编译。新写的程序中，如果有参数，那就声明它。没有参数就使用void.</p>

<p>11. if an external variable is to be referred to before it is defined, or if it is defined in a different source file from the one where it is being used, then an extern declaration is mandatory.<br/>
必须将变量声明为external的情况有两种，一是在定义它（即为它分配内存前）使用它。二是它在别的文件中定义的。</p>

<p>12.the variables that push and pop use for stack manipulation can be hidden, by declaring sp and val to be static.<br/>
通过将变量声明为static,可以将其对外隐藏。</p>

<p>13.A register declaration advises the compiler that the variable in question will be heavily used. The idea is that register variables are to be placed in machine registers, which may result in smaller and faster programs. But compilers are free to ignore the advice.<br/>
将变量声明为register是建议编译器将其放在寄存器中，从而加快读写速度。但是编译器未必采纳该建议。</p>

<p>14. In the absence of explicit initialization, external and static variables are guaranteed to be initialized to zero; automatic and register variables have undefined (i.e., garbage) initial values. For external and static variables, the initializer must be a constant expression.<br/>
外部变量与静态变量自动初始化为0，而自动变量与寄存器变量则未定义。外部变量与静态变量必须使用常数表达式来初始化。</p>

<p>15.char* pattern = &ldquo;ould&rdquo;;  is a shorthand for the longer but equivalent char pattern[] = { &lsquo;o&rsquo;, &lsquo;u&rsquo;, &lsquo;l&rsquo;, &rsquo;d', &lsquo;\0&rsquo; };.</p>

<p>16.#define dprint(expr) printf(#expr &ldquo; = %g\n&rdquo;, expr)
dprint(x/y) the macro is expanded into printf(&ldquo;x/y&rdquo; &ldquo; = &amp;g\n&rdquo;, x/y);</p>

<p>17.C converts it to *(a+i) immediately; the two forms are equivalent. Applying the operator &amp; to both parts of this equivalence, it follows that &amp;a[i] and a+i are also identical: a+i is the address of the i-th element beyond a.<br/>
对于数组a[i], 与*(a+i)是等价的</p>

<p>A pointer is a variable, so pa=a and pa++ are legal. But an array name is not a variable; constructions like a=pa and a++ are illegal.<br/>
指针是变量，但是数组名不是，因此重新赋值或自增都是非法的</p>

<p>If a two-dimensional array is to be passed to a function, the parameter declaration in the function must include the number of columns; the number of rows is irrelevant, since what is passed is, as before, a pointer to an array of rows, where each row is an array of 13 ints. In this particular case, it is a pointer to objects that are arrays of 13 ints. Thus if the array daytab is to be passed to a function f, the declaration of f would be:</p>

<pre><code>f(int daytab[2][13]) { ... }
</code></pre>

<p>It could also be</p>

<pre><code>f(int daytab[][13]) { ... }
</code></pre>

<p>since the number of rows is irrelevant, or it could be</p>

<pre><code>f(int (*daytab)[13]) { ... }
</code></pre>

<p>which says that the parameter is a pointer to an array of 13 integers. The parentheses are necessary since brackets [] have higher precedence than *. Without parentheses
daytab的类型是一个指向有13个元素的数组的指针。将13个元素的数组看成一个对象a,
当我们传递a的数组，我们会用a daytab[], 就像int arr[]一样。这就解释了为什么可以有第二种和第三种表达方式。</p>

<p>the declaration:</p>

<pre><code>int *daytab[13]
</code></pre>

<p>is an array of 13 pointers to integers. More generally, only the first dimension (subscript) of an array is free; all the others have to be specified.<br/>
daytab的类型那个是一个指针数组</p>

<p>argv[0] is the name by which the program was invoked, so argc is at least 1. If argc is 1, there are no command-line arguments after the program name.<br/>
argv[0]是程序的名字，因此argc的值至少为1</p>

<p>additionally, the standard requires that argv[argc] be a null point</p>

<pre><code>char **argv
</code></pre>

<p>argv: pointer to char</p>

<pre><code>int (*daytab)[13]  
</code></pre>

<p>daytab: pointer to array of 13 int elements</p>

<pre><code>*daytab[13]   
</code></pre>

<p>daytab: array[13] of pointer to int</p>

<pre><code>void *comp()
</code></pre>

<p>comp: function returning pointer to void</p>

<pre><code>void (*comp)()
</code></pre>

<p>comp: pointer to function returning void</p>

<pre><code>char (*(*x())[])()
</code></pre>

<p>x: function returning pointer to array[] of pointer to function returning char</p>

<pre><code>char (*(*x[3])())[5]
</code></pre>

<p>x: array[3] of pointer to function returning pointer to array[5] of char</p>

<p>18.Don&rsquo;t assume, however, that the size of a structure is the sum of the sizes of its members. Because of alignment requirements for different objects, there may be unnamed &lsquo;'holes&rsquo;&lsquo; in a structure. Thus, for instance, if a char is one byte and an int four bytes, the structure:</p>

<pre><code>struct {
    char c;
    int i;
};  
</code></pre>

<p>might well require eight bytes, not five.<br/>
一个结构的大小不一定是所有成员变量内存大小之和，因为内存需要对齐，所以存在洞。比如例子的结构占用8字节，第一个四字节中只有第一个字节是有效的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective Java Note-2]]></title>
    <link href="http://zionwu.github.io/blog/2013/05/02/effective-java-note-2/"/>
    <updated>2013-05-02T00:18:00+08:00</updated>
    <id>http://zionwu.github.io/blog/2013/05/02/effective-java-note-2</id>
    <content type="html"><![CDATA[<h2>创建与销毁对象</h2>

<h3>遇到多个构造器参数时考虑用构建器</h3>

<p>当构造器有多个可选的参数的时候，程序员往往使用重叠构造器模式(telescoping constructor), 即：</p>

<pre><code>public class NutritionFacts
{
    private final int servingSize; //required
    private fianl int serings; required
    private final int calories; //optional
    private final int fat;      //optional
    private final int sodium;   //optional

    public NutritionFacts(int servingSize, int servings)
    {
        this(servingSize, servings, 0);
    }

    public NutritionFacts(int servingSize, int servings, int calories)
    {
        this(servingSize, servings, calories, 0);
    }

    public NutritionFacts(int servingSize, int servings, int calories, int fat)
    {
        this(servingSize, servings, calories, fat, 0);
    }

    public NutritionFacts(int servingSize, int servings, int calories, int fat, int sodium)
    {
        this.servingSize = servingSize;
        this.servings = servings;
        this.calories = calories;
        this.fat = fat;
        this.sodium = sodium;
    }
}  
</code></pre>

<p>这种写法不易与程序员的理解与记忆，很容易将参数的顺序弄错，而编译器也不会发现这种错误，从而导致难以发现的bug。还有一种模式是Java Bean模式，即：</p>

<pre><code>public class NutritionFacts
{
    private final int servingSize; //required
    private fianl int serings; required
    private final int calories; //optional
    private final int fat;      //optional
    private final int sodium;   //optional

    public NutritionFacts(){}

    //setter
    public void setServiceSize(int val){ servingSize = val; }
    public void setServings(int val){ servings = val; }
    public void setCalories(int val){ calories = val; }
    public void setFat(int val){ fat = val; }
    public void setSodium(int val){ sodium = val; }     
}  
</code></pre>

<p>这种模式虽然易于理解和使用，但是有一个缺点，就是在构造过程中Java Bean可能处于不一致的状态，而且也不能将其设计成不可变(imutable)的类。后面介绍的构建器(builder)模式既能够有第一种模式的安全性，又有第二种模式的可读性。它的例子如下：</p>

<pre><code>public class NUtritionFacts
{
    private final int servingSize; //required
    private fianl int serings; required
    private final int calories; //optional
    private final int fat;      //optional
    private final int sodium;   //optional

    public static class Builder
    {
        private final int servingsize; //required
        private fianl int serings; //required
        private final int calories = 0; //optional
        private final int fat = 0;      //optional
        private final int sodium = 0;   //optional

        public Builder(int servingSize, int servings)
        {
            this.servingSize = servingSize;
            this.servings = servings;
        }

        public Builder calories(int val){ calories = val; return this;}
        public Builder fat(int val){ fat = val; return this;}
        public Builder sodium(int val){ sodium = val; return this;} 

        public NutritionFacts build()
        {
            return new NutritionFacts(this);
        }
    }

    public NutritionFacts(Builder builder)
    {
        servingSize = builder.servingSize;
        servings = builder.servings;
        calories = builder.calories;
        fat = builder.fat;
        sodium = builder.sodium;
    }
} 
</code></pre>

<p>以上的例子有三点需要注意。<br/>
1. Builder是一个内嵌类，而且是静态的。静态的内嵌类和静态的成员变量不一样。静态的内嵌类表示该类和外围类的实例没有关联。如果内嵌类不是静态的，那么必须先有外围类的实例，才能有内嵌类的实例，内嵌类的实例中会有对外围类实例的引用。<br/>
2. 细心的读者可能发现，在NutritionFacts(Builder builder)这个构造器方法中，能够使用builder这个实例的私有域，这是因为Builder是NutritionFacts的内嵌类，Builder的私有域对于NutritionFacts内的方法是可见的。
3. Builder中的setter方法返回的是Builder对象，在设值后都会return this,这是为了能够链式调用，如：</p>

<pre><code>NutritionFacts cala = new NutritionFacts.Builder(240 , 0).calories(100).sodium(35).build();
</code></pre>

<h3>用私有构造器或者枚举强化Singleton属性</h3>

<p>Singleton指一个类只有一个实例。实现单例有3种方式。<br/>
第一种方法的公有静态成员是个final域：</p>

<pre><code>public class Elvis
{
    public static final Elvis INSTANCE = new Elvis();
    private Elvis() {...}  
    ...  
} 
</code></pre>

<p>第二种方法中公有的成有是个静态工厂方法：</p>

<pre><code>public class Elvis  
{
    private static final Elivs INSTANCE = new Elvis();
    private Elsvis(){...}
    public static Elvis getInstance()
    {
        return INSTANCE;
    }
}
</code></pre>

<p>需要注意的是，以上两种方法，如果要将其变成是可序列化(serializable)的，为了保证其Singleton的属性，需要将所有实例域声明为transient，并且提供一个readResolve方法。
第三种方法是将其定义为枚举类， 枚举类本身就是Singlenton，并且无偿提供了序列化机制。</p>

<h3>通过私有构造器强化不可实例化的能力</h3>

<p>对于一些工具类，如java.lang.Math, java.util.Coolections, 把基本类型的值或者特定接口的对象上的静态方法组织起来，实例对他们没有意义，确保它们不会被实例化的方法是将构造器定义为私有的(private)， 如：</p>

<pre><code>public class UtilityClass 
{
    private UtilityClass();
    ...
}  
</code></pre>

<p>这种做法的副作用是该类是不能被继承的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[effective java note-1]]></title>
    <link href="http://zionwu.github.io/blog/2013/04/25/effective-java-note-1/"/>
    <updated>2013-04-25T23:41:00+08:00</updated>
    <id>http://zionwu.github.io/blog/2013/04/25/effective-java-note-1</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>对于Effective java，有人初看时可能会觉得这本书讲的都是java的一些技巧。书中确实介绍了很多更好的使用java特性的技巧。但是，本书的精华在于怎么用写API的思想来编写程序。在微薄上看到陈皓老师的一条微薄，印象深刻，大致意思是目前很多程序员仍然带着写应用的思想在写程序，而不是从写平台API提供者的角度来写。这一系列的读书笔记将突出书中的API编写思想。注：本文的读者需要对面向对象编程(Object Oriented Programming)有一定的了解。</p>

<h2>创建与销毁对象</h2>

<h3>使用静态工厂方法代替构造器</h3>

<p>静态工厂方法的例子如下：</p>

<pre><code>public static Boolean valueOf(boolean b)
{
    return b ? Boolean.TRUE : Boolean.FALSE;
}
</code></pre>

<h4>静态工厂方法(static factory method)的优缺点</h4>

<p>为什么要使用静态工厂方法(static factory method)呢？<br/>
1. <em>静态工厂方法有名字。</em><br/>
写程序时，变量名，方法名都是很重要的元素。<em>程序的本质在于抽象</em>，一个好的名字就是好的抽象。构造器(constructor)的名字都必须和类名相同，当类拥有多个构造器的时候，使用者往往很难理解不同构造器的含义。而静态方法可以通过使用不同的名字代表该方法的抽象，因此使用者不会混淆。<br/>
2. 不必每次被调用都创建心的对象。<br/>
即通过使用静态工厂方法可以实现单例模式(singleton)，从而避免创建不必要的重复对象。上面的例子中，Boolean的valueOf方法每次返回的都是一个枚举(enum)类型，而<em>枚举类型就是单例的</em> <br/>
3. 可以返回原类型的任何字类型对象。<br/>
例子如下：</p>

<pre><code>public static Type getInstance()
{
    return new SubType();
}  
</code></pre>

<p>例子中的SubType是Type的子类。使用构造器的时候，用户只能得到该类的实例，而静态方法能够返回其子类的类型。这就是设计模式中所强调的<em>针对接口编程</em>的原则，这将增加代码的灵活性，如果日后需要对Type有新的实现，那么只需要修改静态方法中的一句话就够了，即return new AnotherSubType();。书中在此点时介绍了服务者提供者框架(service provider framework), 这是一个十分重要的设计模式，此节后面会详细介绍。<br/>
4. 创建参数化实例的时候代码能够更加简洁。
书中的例子如下：</p>

<pre><code>Map&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;Stirng, List&lt;String&gt;&gt;();
</code></pre>

<p>当初始化参数化的容器时，需要重复敲写两次参数。而使用静态方法的话：</p>

<pre><code>public static &lt;K, V&gt; HashMap&lt;K, V&gt; newInstance()
{
    return new HashMap&lt;K, V&gt;();
}
Map&lt;String, List&lt;String&gt;&gt; m = HashMap.newInstance()  
</code></pre>

<p>因为编译器的类型推导(type inference)，上面的静态范型方法能够推导出 K=String, V=List&lt;Stirng>的事实。<br/>
静态方法的缺点有： <br/>
1. 如果类不含有非私有的构造器，就不能被继承。<br/>
2. 不能和其他静态方法区分开。</p>

<h4>服务者提供者框架(service provider framework)</h4>

<p>服务提供者框架有三个基本的组件：<em>服务接口(service API)</em>，<em>提供者注册API(provider registration API)</em>， <em>服务访问API(service access API)</em>。还有一个可选的组件是<em>服务提供者接口(service provider interface)</em>。首先举个通俗的例子来帮助大家理解这个框架的三个基本组件。大学里某门课程，往往会提供数个教学班，在不同时间由不同老师来上。虽然老师不一样，但是课程的教学大纲必须是一致的，而且期末考试也是一样的。课程的大纲，期末试卷，都是由课程组规定的，是该门课提供给学生的统一的服务，也就是服务接口。无论你上A老师的还是B老师的计算机组成，都是学习多周期CPU，内存模型等知识，而不可能是计算理论的知识。但是不同的老师，可以采取不同的教学模式，A老师可能比较注重理论，B老师则可能注重实践，即他们对服务接口有不一样的实现。A老师和B老师要开课，需要将他们的课程的地点和时间等信息填表向课程组申请开课。这个申请的过程即提供者注册API，即服务者将服务获取的渠道注册在某个地方。学生选课的过程则是服务访问API，即获取服务的方式。笔者接下来将详细介绍每一个组件。<br/>
1. 服务接口 <br/>
服务接口定义了系统所能够提供的服务，一般是有平台工程师编写，所谓平台就是上面例子中的课程组。书中例子如下：</p>

<pre><code>public interface Service
{
    ...// Service-specific methods, 即这个接口定义的方法，也就是Service所能提供的服务
}  
</code></pre>

<p>对于一个开放平台，这个接口给该平台的应用工程师使用，应用工程师则是例子中的老师，是服务的真正提供者。<br/>
2. 提供者注册API与服务访问API <br/>
这两个组件一般是在一个工厂类中实现的，例子如下：</p>

<pre><code>public class Services
{
    private Services(){}

    private static final Map&lt;String, Service&gt; services = new ConcurrentHashMap&lt;String, Service&gt;();
    public static final String DEFAULT_SERVICE_NAME = "def";

    //提供者注册API(provider registration API)
    public static void registerDefaultService(Service s)
    {
        registerService(DEFAULT_SERVICE_NAME, s);
    }

    public static void registerService(String name, Service s)
    {
        services.put(name, p);
    }

    //服务访问API(service access API)
    public static Service newInstance()
    {
        return services.newInstance(DEFAULT_SERVICE_NAME);
    }

    public static Service newInstance(String name)
    {
        Service s = services.get(name);
        if (s == null)
            throws IllegalArgumentException( "No service registered with name" + name );
        return s;
    }
}  
</code></pre>

<p>该类是模仿书中的例子编写的，书中的例子包含了可选组件服务提供者接口，这里为了简单而只用了三个基本组件。首先注意该类的构造器是私有的，即该类<em>不可实例化</em>。对于提供者注册API和服务访问API，都重载了一个方法，即一个默认的服务。比如当学生没有主动选课的时候系统将自动为他选择一个默认的老师。而注册和获取实际都是对一个Map进行操作，注意该Map是一个ConcurrentHashMap，这是为了<em>线程安全</em>，防止多个线程同时调用类中方法时出现数据不一致或者冲突的情况。<br/>
3. 服务提供者接口<br/>
服务提供者接口实际上是将服务提供和服务注册分离开。例子如下：</p>

<pre><code>public interface Provider
{
    Service newService();
}
</code></pre>

<p>然后将第二点的例子中的Service类替换成Provider, 如下：</p>

<pre><code>public class Services
{
    private Services(){}

    private static final Map&lt;String, Provider&gt; providers = new ConcurrentHashMap&lt;String, Provider&gt;();
    public static final String DEFAULT_SERVICE_NAME = "def";

    //提供者注册API(provider registration API)
    public static void registerDefaultProvider(Provider s)
    {
        registerService(DEFAULT_SERVICE_NAME, s);
    }

    public static void registerProvider(String name, Provider s)
    {
        providers.put(name, p);
    }

    //服务访问API(service access API)
    public static Service newInstance()
    {
        return providers.newInstance(DEFAULT_SERVICE_NAME);
    }

    public static Service newInstance(String name)
    {
        Service s = providers.get(name);
        if (s == null)
            throws IllegalArgumentException( "No provider registered with name" + name );
        return s.newService();
    }
}
</code></pre>

<p>这样注册的就是Provider而不是Service了，那么同一个提供者，日后可以修改自己的服务，并在自己实现的Provider子类中的newService()方法中提供自己新的服务。这样就大大增加了灵活性。</p>

<p>总而言之，服务提供者框架是一个十分重要而且常用的框架，使用它来创建API，可以大大的<em>增加API的灵活性，达到高内聚性和低耦合度</em>。</p>
]]></content>
  </entry>
  
</feed>
